/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-05-17 00:09:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import java.text.SimpleDateFormat;

public final class fixture_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("    <title>XPectable Fixture</title>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"resources/css/fixture.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("\r\n");
      out.write(".date {\r\n");
      out.write("    \r\n");
      out.write("    padding-top: 10px;\r\n");
      out.write("    padding-left: 27.5%;\r\n");
      out.write("    font-size: 1.1em;\r\n");
      out.write("    color: #555;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table {\r\n");
      out.write("    width: 50%;\r\n");
      out.write("    left: 25%;\r\n");
      out.write("    position: relative;\r\n");
      out.write("    margin-bottom: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("    border: 1px solid #ddd;\r\n");
      out.write("    padding: 12px;\r\n");
      out.write("    text-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("    background-color: #FC6736;\r\n");
      out.write("    color: white;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("    text-align:center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td {\r\n");
      out.write("    background-color: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:nth-child(even) td {\r\n");
      out.write("    background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:hover td {\r\n");
      out.write("    background-color: #e9ecef;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h2 {\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    padding-top: 200px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h4 {\r\n");
      out.write("    padding-left: 70%;\r\n");
      out.write("    padding-top: 15px;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h5 {\r\n");
      out.write("    padding-top: 10px;\r\n");
      out.write("    font-size: 1.2em;\r\n");
      out.write("    color: #343a40;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("        \r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"menu_box\">\r\n");
      out.write("      <div class=\"logo\">\r\n");
      out.write("          <hr />\r\n");
      out.write("          <a href=\"index.jsp\"><h3><b style=\"color:#FC6736;font-size:35px\">XP</b>ectable</h3></a>\r\n");
      out.write("          <hr />\r\n");
      out.write("      </div>\r\n");
      out.write("      <ul>\r\n");
      out.write("          <li><a class=\"home\" href=\"index.jsp\"><i class=\"fa fa-home fa-fw\"></i>\r\n");
      out.write("              Home</a></li>\r\n");
      out.write("          <li><a href=\"fixture.jsp\"><i class=\"fa fa-calendar fa-fw\"></i>\r\n");
      out.write("              Fixture</a></li>\r\n");
      out.write("          <li><a href=\"standing.jsp\"><i class=\"fa-solid fa-ranking-star fa-fw\"></i>\r\n");
      out.write("              Standing</a></li>\r\n");
      out.write("          <li><a href=\"stat.jsp\"><i class=\"fa-solid fa-chart-column\"></i>\r\n");
      out.write("              Stats</a></li>\r\n");
      out.write("          <li><a href=\"contact.html\"><i class=\"fa fa-envelope fa-fw\"></i>\r\n");
      out.write("              Contact</a></li>\r\n");
      out.write("          \r\n");
      out.write("          <div class=\"social_media\">\r\n");
      out.write("              <a href=\"#\"><i class=\"fa-brands fa-linkedin\" style=\"color:#EFECEC\"></i></a>\r\n");
      out.write("              <a href=\"#\"><i class=\"fa-brands fa-github\" style=\"color:#EFECEC\"></i></a>\r\n");
      out.write("          </div>\r\n");
      out.write("      </ul>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"filter-dropdown\">\r\n");
      out.write("      <label for=\"drop-btn\" class=\"dropdown-label\">Filter:</label>\r\n");
      out.write("      <button onclick=\"dropdownFunction()\" id=\"drop-btn\" class=\"dropdown-btn\">All</button>\r\n");
      out.write("      <ul id=\"drop-content\" class=\"dropdown-content\">\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=-1\">All</a></li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=1\">Massachusetts</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=301\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=302\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=2\">New Jersey</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=201\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=202\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=3\">New York</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=101\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=102\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=4\">Pennsylvania</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=401\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=402\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=5\">Virginia</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=501\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=502\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("    </ul>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h2 style=\"text-align: center; padding-top: 200px;\">Fixture</h2>\r\n");
      out.write("\r\n");

    // Initialize variables to keep track of the current round and date
    int currentRound = -1;
    Date currentDate = null;

    // Default SQL query
    String sql = "SELECT * FROM game ORDER BY game_round, game_date";

    // Retrieve league_id parameter from the request
    String leagueIdParam = request.getParameter("league_id");
    int leagueId = -1; // Default value or handle null case
    if (leagueIdParam != null && !leagueIdParam.isEmpty()) {
        leagueId = Integer.parseInt(leagueIdParam);
    }

    // Check if a specific league is selected
    if (leagueId != -1) {
        // Adjust SQL query to filter by league
        sql = "SELECT * FROM game INNER JOIN team ON game.home_team_id = team.team_id WHERE team.league_id = ? ORDER BY game_round, game_date";
    }

    try {
        // Load the MySQL JDBC driver
        Class.forName("com.mysql.cj.jdbc.Driver");

        // Establish the database connection
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/xpectable_data", "root", "MyPass123!");

        // Prepare the SQL query
        PreparedStatement statement = conn.prepareStatement(sql);

        // Set league parameter if applicable
        if (leagueId != -1) {
            statement.setInt(1, leagueId);
        }

        // Execute the query
        ResultSet rs = statement.executeQuery();

        // Iterate through the result set
        while (rs.next()) {
            int gameId = rs.getInt("game_id");
            int round = rs.getInt("game_round");
            Date gameDate = rs.getDate("game_date");
            Time gameTime = rs.getTime("game_time");
            int homeTeamId = rs.getInt("home_team_id");
            int awayTeamId = rs.getInt("away_team_id");

            // Retrieve result for the current game
            PreparedStatement resultStatement = conn.prepareStatement("SELECT * FROM result WHERE game_id = ?");
            resultStatement.setInt(1, gameId);
            ResultSet resultRs = resultStatement.executeQuery();

            int homeScore = -1;
            int awayScore = -1;
            if (resultRs.next()) {
                homeScore = resultRs.getInt("home_team_score");
                awayScore = resultRs.getInt("away_team_score");
            }

            resultRs.close();
            resultStatement.close();

            // Handle new round
            if (round != currentRound) {
                if (currentRound != -1) {
                    
      out.write("</tbody></table>");
 // Close previous round table
                }
                
      out.write("\r\n");
      out.write("                <div class=\"round\">\r\n");
      out.write("                    <h4 style=\"padding-left: 70%; padding-top: 15px;\">Round ");
      out.print( round );
      out.write("</h4>\r\n");
      out.write("                ");

                currentRound = round;
            }

            // Handle new date
            if (!gameDate.equals(currentDate)) {
                if (currentDate != null) {
                    
      out.write("</tbody></table>");
 // Close previous date table
                }
                
      out.write("\r\n");
      out.write("                <h5 class=\"date\" style=\"padding-top: 10px;\">");
      out.print( gameDate );
      out.write("</h5>\r\n");
      out.write("                <table>\r\n");
      out.write("                    <thead>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th>Home Team</th>\r\n");
      out.write("                            <th>");
      out.print( (homeScore != -1 && awayScore != -1) ? "Score" : "Time" );
      out.write("</th>\r\n");
      out.write("                            <th>Away Team</th>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </thead>\r\n");
      out.write("                    <tbody>\r\n");
      out.write("                ");

                currentDate = gameDate;
            }

            // Retrieve home team name
            PreparedStatement homeTeamStatement = conn.prepareStatement("SELECT team_name FROM team WHERE team_id = ?");
            homeTeamStatement.setInt(1, homeTeamId);
            ResultSet homeTeamResult = homeTeamStatement.executeQuery();
            String homeTeamName = homeTeamResult.next() ? homeTeamResult.getString("team_name") : "";
            homeTeamStatement.close();
            homeTeamResult.close();

            // Retrieve away team name
            PreparedStatement awayTeamStatement = conn.prepareStatement("SELECT team_name FROM team WHERE team_id = ?");
            awayTeamStatement.setInt(1, awayTeamId);
            ResultSet awayTeamResult = awayTeamStatement.executeQuery();
            String awayTeamName = awayTeamResult.next() ? awayTeamResult.getString("team_name") : "";
            awayTeamStatement.close();
            awayTeamResult.close();

            // Format time in 12-hour format
            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
            String formattedTime = sdf.format(gameTime);
            
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( homeTeamName );
      out.write("</td>\r\n");
      out.write("                <td style=\"text-align:center;\">");
      out.print( (homeScore != -1 && awayScore != -1) ? homeScore + ":" + awayScore : formattedTime );
      out.write("</td>\r\n");
      out.write("                <td style=\"text-align:right;\">");
      out.print( awayTeamName );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            ");

        }

        // Close the last date and round table
        if (currentDate != null) {
            
      out.write("</tbody></table>");

        }
        if (currentRound != -1) {
            
      out.write("</div>");

        }

        rs.close();
        statement.close();
        conn.close();
    } catch (Exception e) {
        e.printStackTrace();
    }

      out.write("\r\n");
      out.write("\r\n");
      out.write("   <footer>\r\n");
      out.write("      <p> Allan Emmanuel<br>\r\n");
      out.write("         <a style=\"text-decoration:none\" href=\"mailto:allanfrelens@gamil.com\">allanfrelens@gamil.com</a>\r\n");
      out.write("      </p>\r\n");
      out.write("      <div class=\"social_media\">\r\n");
      out.write("         <a href=\"#\"><i class=\"fa-brands fa-linkedin\" style=\"color:#0C2D57\"></i></a>\r\n");
      out.write("         <a href=\"#\"><i class=\"fa-brands fa-github\" style=\"color:#0C2D57\"></i></a>\r\n");
      out.write("      </div>\r\n");
      out.write("   </footer>\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"resources/js/fixture.js\"></script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
