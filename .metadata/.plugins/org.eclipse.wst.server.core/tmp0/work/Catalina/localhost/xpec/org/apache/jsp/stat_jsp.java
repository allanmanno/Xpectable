/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-05-17 00:42:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;

public final class stat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>League Statistics</title>\r\n");
      out.write("    <!-- Include Chart.js library -->\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"resources/css/stat.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("        .chart-container {\r\n");
      out.write("            width: 20%;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("            margin: 0 ;\r\n");
      out.write("            padding-top: 200px; /* Add padding to the top */\r\n");
      out.write("            text-align: center; /* Center align the charts */\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"menu_box\">\r\n");
      out.write("      <div class=\"logo\">\r\n");
      out.write("          <hr>\r\n");
      out.write("          <a href=\"index.jsp\"><h3><b style=\"color:#FC6736;font-size:35px\">XP</b>ectable</h3></a>\r\n");
      out.write("          <hr>\r\n");
      out.write("      </div>\r\n");
      out.write("      <ul>\r\n");
      out.write("          <li><a class=\"home\" href=\"index.jsp\"><i class=\"fa fa-home fa-fw\"></i>\r\n");
      out.write("              Home</a></li>\r\n");
      out.write("          <li><a href=\"fixture.jsp\"><i class=\"fa fa-calendar fa-fw\"></i>\r\n");
      out.write("              Fixture</a></li>\r\n");
      out.write("          <li><a href=\"standing.jsp\"><i class=\"fa-solid fa-ranking-star fa-fw\"></i>\r\n");
      out.write("              Standing</a></li>\r\n");
      out.write("          <li><a href=\"stat.jsp\"><i class=\"fa-solid fa-chart-column\"></i>\r\n");
      out.write("              Stats</a></li>\r\n");
      out.write("          <li><a href=\"contact.html\"><i class=\"fa fa-envelope fa-fw\"></i>\r\n");
      out.write("              Contact</a></li>\r\n");
      out.write("          \r\n");
      out.write("          <div class=\"social_media\">\r\n");
      out.write("              <a href=\"#\"><i class=\"fa-brands fa-linkedin\" style=\"color:#EFECEC\"></i></a>\r\n");
      out.write("              <a href=\"#\"><i class=\"fa-brands fa-github\" style=\"color:#EFECEC\"></i></a>\r\n");
      out.write("          </div>\r\n");
      out.write("      </ul>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"filter-dropdown\">\r\n");
      out.write("      <label for=\"drop-btn\" class=\"dropdown-label\">Filter:</label>\r\n");
      out.write("      <button onclick=\"dropdownFunction()\" id=\"drop-btn\" class=\"dropdown-btn\">All</button>\r\n");
      out.write("      <ul id=\"drop-content\" class=\"dropdown-content\">\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=-1\">All</a></li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=1\">Massachusetts</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=301\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=302\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=2\">New Jersey</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=201\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=202\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=3\">New York</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=101\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=102\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=4\">Pennsylvania</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=401\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=402\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("        <li><a href=\"fixture.jsp?league_id=5\">Virginia</a>\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=501\">Division 1</a></li>\r\n");
      out.write("                <li><a href=\"fixture.jsp?league_id=502\">Division 2</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </li>\r\n");
      out.write("    </ul>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- Create chart containers for the charts -->\r\n");
      out.write("<div class=\"charts-container\"> <!-- Container for the charts -->\r\n");
      out.write("    <!-- Create chart containers for the charts -->\r\n");
      out.write("    <div class=\"chart-container\">\r\n");
      out.write("        <canvas id=\"goalsForChart\" width=\"400\" height=\"400\"></canvas>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"chart-container\">\r\n");
      out.write("        <canvas id=\"goalsAgainstChart\" width=\"400\" height=\"400\"></canvas>\r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"chart-container\">\r\n");
      out.write("        <canvas id=\"gamesWonChart\" width=\"400\" height=\"400\"></canvas>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("   ");

    Connection conn = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    // Retrieve league ID parameter from URL
    int leagueIdFilter = -1; // Default to show all leagues
    String leagueIdParam = request.getParameter("league_id");
    if (leagueIdParam != null && !leagueIdParam.isEmpty()) {
        leagueIdFilter = Integer.parseInt(leagueIdParam);
    }

    try {
        Class.forName("com.mysql.cj.jdbc.Driver");
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/xpectable_data", "root", "MyPass123!");

        // Retrieve standings data for the current league or all leagues if leagueIdFilter is -1
        String query = "SELECT t.team_name, " +
                                "SUM(s.goals_for) AS goals_for, " +
                                "SUM(s.goals_against) AS goals_against, " +
                                "SUM(s.game_won) AS games_won " +
                        "FROM team t " +
                        "LEFT JOIN standing s ON t.team_id = s.team_id ";
        if (leagueIdFilter != -1) {
            query += "WHERE s.league_id = ? ";
        }
        query += "GROUP BY t.team_name " +
                  "ORDER BY t.team_name ASC";

        stmt = conn.prepareStatement(query);
        if (leagueIdFilter != -1) {
            stmt.setInt(1, leagueIdFilter);
        }
        rs = stmt.executeQuery();

        // Initialize arrays to store data for the charts
        String[] teamNames = new String[10]; // Assuming you're displaying data for top 10 teams
        int[] goalsFor = new int[10];
        int[] goalsAgainst = new int[10];
        int[] gamesWon = new int[10];
        int i = 0;
        while (rs.next() && i < 10) { // Retrieve data for top 10 teams
            teamNames[i] = rs.getString("team_name");
            goalsFor[i] = rs.getInt("goals_for");
            goalsAgainst[i] = rs.getInt("goals_against");
            gamesWon[i] = rs.getInt("games_won");
            i++;
        }

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    // Get data from JSP variables\r\n");
      out.write("    var teamNames = ");
      out.print( new com.google.gson.Gson().toJson(teamNames) );
      out.write(";\r\n");
      out.write("    var goalsFor = ");
      out.print( new com.google.gson.Gson().toJson(goalsFor) );
      out.write(";\r\n");
      out.write("    var goalsAgainst = ");
      out.print( new com.google.gson.Gson().toJson(goalsAgainst) );
      out.write(";\r\n");
      out.write("    var gamesWon = ");
      out.print( new com.google.gson.Gson().toJson(gamesWon) );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("    // Create bar chart for goals scored\r\n");
      out.write("    var ctxGoalsFor = document.getElementById('goalsForChart').getContext('2d');\r\n");
      out.write("    var goalsForChart = new Chart(ctxGoalsFor, {\r\n");
      out.write("        type: 'bar',\r\n");
      out.write("        data: {\r\n");
      out.write("            labels: teamNames,\r\n");
      out.write("            datasets: [{\r\n");
      out.write("                label: 'Goals For',\r\n");
      out.write("                backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n");
      out.write("                borderColor: 'rgba(255, 99, 132, 1)',\r\n");
      out.write("                borderWidth: 1,\r\n");
      out.write("                data: goalsFor\r\n");
      out.write("            }]\r\n");
      out.write("        },\r\n");
      out.write("        options: {\r\n");
      out.write("            scales: {\r\n");
      out.write("                yAxes: [{\r\n");
      out.write("                    ticks: {\r\n");
      out.write("                        beginAtZero: true\r\n");
      out.write("                    }\r\n");
      out.write("                }]\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Create bar chart for goals against\r\n");
      out.write("    var ctxGoalsAgainst = document.getElementById('goalsAgainstChart').getContext('2d');\r\n");
      out.write("    var goalsAgainstChart = new Chart(ctxGoalsAgainst, {\r\n");
      out.write("        type: 'bar',\r\n");
      out.write("        data: {\r\n");
      out.write("            labels: teamNames,\r\n");
      out.write("            datasets: [{\r\n");
      out.write("                label: 'Goals Against',\r\n");
      out.write("                backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n");
      out.write("                borderColor: 'rgba(54, 162, 235, 1)',\r\n");
      out.write("                borderWidth: 1,\r\n");
      out.write("                data: goalsAgainst\r\n");
      out.write("            }]\r\n");
      out.write("        },\r\n");
      out.write("        options: {\r\n");
      out.write("            scales: {\r\n");
      out.write("                yAxes: [{\r\n");
      out.write("                    ticks: {\r\n");
      out.write("                        beginAtZero: true\r\n");
      out.write("                    }\r\n");
      out.write("                }]\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    // Create bar chart for games won\r\n");
      out.write("    var ctxGamesWon = document.getElementById('gamesWonChart').getContext('2d');\r\n");
      out.write("    var gamesWonChart = new Chart(ctxGamesWon, {\r\n");
      out.write("        type: 'bar',\r\n");
      out.write("        data: {\r\n");
      out.write("            labels: teamNames,\r\n");
      out.write("            datasets: [{\r\n");
      out.write("                label: 'Games Won',\r\n");
      out.write("                backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n");
      out.write("                borderColor: 'rgba(75, 192, 192, 1)',\r\n");
      out.write("                borderWidth: 1,\r\n");
      out.write("            data: gamesWon\r\n");
      out.write("            }]\r\n");
      out.write("        },\r\n");
      out.write("        options: {\r\n");
      out.write("            scales: {\r\n");
      out.write("                yAxes: [{\r\n");
      out.write("                    ticks: {\r\n");
      out.write("                        beginAtZero: true\r\n");
      out.write("                    }\r\n");
      out.write("                }]\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");

    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"resources/js/fixture.js\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
